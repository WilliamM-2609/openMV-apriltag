
import sensor
import image
import time
import math

sensor.reset()
sensor.set_pixformat(sensor.RGB565)
sensor.set_framesize(sensor.QVGA)
sensor.set_auto_gain(False)  # must turn this off to prevent image washout...
sensor.set_auto_whitebal(False)  # must turn this off to prevent image washout...
clock = time.clock()

# Note! Unlike find_qrcodes the find_apriltags method does not need lens correction on the image to work.

# The apriltag code supports up to 6 tag families which can be processed at the same time.
# Returned tag objects will have their tag family and id within the tag family.

tag_families = 0
tag_families |= image.TAG36H11  # comment out to disable this family (default family)


def family_name(tag):
    if tag.family() == image.TAG36H11:
        return "TAG36H11"

while True:
    clock.tick()
    img = sensor.snapshot()
    for tag in img.find_apriltags(families=tag_families):
        img.draw_rectangle(tag.rect(), color=(255, 0, 0))
        img.draw_cross(tag.cx(), tag.cy(), color=(0, 255, 0))
        print_args = (family_name(tag), tag.id(), (180 * tag.rotation()) / math.pi)
        AT_X = (sensor.width()/2)-tag.cx()
        AT_Y = (sensor.height()/2)-tag.cy()
        print(f"x:{AT_X/(sensor.width()/200)}, y: {AT_Y/(sensor.height()/200)}, id: {tag.id()}")
